/* Please see documentation at https://docs.microsoft.com/aspnet/core/client-side/bundling-and-minification 
for details on configuring this project to bundle and minify static web assets. */

ul.movie-list{
    padding: 0;
    margin: 0;
    border-top: 1px solid gray;
}

ul.movie-list > li{
    list-style-type: none;
    border-bottom: 1px solid lightgray;
    margin: 10px; 
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: flex-start;
    min-height: 50px;
}

.title{
    color: darkslategray;
    font-size: 1.2rem;
    margin: 0;

}

.mpaa, .genre{
    color: slategray;
}

.ratings{
    display: flex;
    flex-direction: row;
}

.imdb, .rotten-tomatoes{
    color:gray;
    border: 1px solid gray;
    width: 60px;
    text-align: center;
    font-size: 1.2rem;
}

.imdb::before{
    content: "IMDB";
    display: block;
    font-size: 1rem;

}

.rotten-tomatoes::before {
    content: "Rotten";
    display: block;
    font-size: 1rem;
}

/*The right column will be three times as big as the right.*/
form#movie-database {
    display: grid;
    grid-template-columns: 1fr 3fr;
    grid-template-rows: auto auto;
}
/*We can make our search bar span both columns with grid-column-start and grid-column-end:*/
#search {
    grid-column-start: 1;
    grid-column-end: 3;
    text-align: center;
}
/*Notice too that for CSS, we start counting at 1, not 0. The filters and the results will fall in the next row automatically, each taking up thier own respective grid cell. You can read more about the grid layout in A Complete Guide to Grid.

Let’s go ahead and use flexbox to lay out our filters in a column:*/
#filters {
    display: flex;
    flex-direction: column;
}
/*And make our number inputs smaller:*/


#filters input[type=number] {
    width: 3rem;
}
/*Also, let’s remove most of the margin below our <h4 > elements:*/
#filters h4 {
    margin-bottom: 0.2rem;
}